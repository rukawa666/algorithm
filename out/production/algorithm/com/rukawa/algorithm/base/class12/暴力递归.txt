暴力递归和动态规划的关系
    某一个暴力递归，有解的重复调用，就可以把这个暴力递归优化成动态规划
    任何动态规划问题，都一定对应这某一个有重复过程的暴力递归
    但不是所有的暴力递归，都一定对应着动态规划

如何找到某个问题的动态规划方式
    1. 设计暴力递归：重要原则+4种常见的尝试模型
    2. 分析有没有重复解：套路解决
    3. 用记忆化搜索 > 用严格表结构实现动态规划：套路解决
    4. 看看是否能继续优化：套路解决

面试中设计暴力递归过程的原则
    1. 每一个可变参数的类型，一定不要比int类型更加复杂
    2. 原则1可以违反，让类型突破到一维线性结构，那必须是单一可变参数
    3. 如果发现原则1被违反，但不违反原则2，只需要做到记忆化搜索即可
    4. 可变参数的个数，能少则少

常见的四种尝试模型
    1. 从左往右的尝试模型
    2. 范围上的尝试模型
    3. 多样本位置全对应的尝试模型
    4. 寻找业务限制的尝试模型

如何分析有没有重复解
    列出掉用过程，可以只列出前几层，有没有重复解，一看便知

暴力递归到动态规划的套路
    1. 你已经有了一个不违反原则的暴力递归，而且的确存在解的重复调用
    2. 找到哪些参数的变化会影响返回值，对每一个列出变化范围
    3. 参数间的所有组合数量，意味着大小
    4. 记忆化搜索的方法就是傻缓存，非常容易得到
    5. 规定好严格表的大小，分析位置的依赖顺序，然后从基础填写到最终解
    6. 对于有枚举行为的决策过程，进一步优化

动态规划的进一步优化
    1. 空间压缩
    2. 状态化简
    3. 四边形不等式
    4. 其他优化技巧

样本对应模型 往往讨论当前的结尾该如何组织可能性
范围尝试模型：讨论开头和结尾的可能性
业务限制模型：不知道dp中格子需要多大，人为分析可能性，可能性最大值就是格子大小
空间压缩：1.如果遇到一个二维dp中的一个位置需要依赖左边和上面位置的值，则可以使用空间压缩
        先填写第一行的值，只依赖左边的值
        更新第二行的值，0位置的只需要依赖上面的位置，此时先把第0列更新好，此时第二行第1列的值依赖第0行的值和原来第一行的值

        2. 如果遇到二维dp中一个位置需要依赖左上和上的位置的值，也可以使用空间压缩
        先更新第0行，没有左上和上，自我能得到
        更新第1行，一维dp可以从右往左填，依次更新一维dp

        3.如果二维dp中一个位置需要依赖左，上，左上位置的值，可以使用空间压缩使用一维数据
        先更新第0行，没有上和左上，只依赖左边的位置
        更新第1行，第0列只有上，可以更新得到，更新第1列，左边的位置更新好了，上面的位置值可以得到，
        但是左上的位置已经被更新了，所以更新第0列的时候，用变量记住原始第0列的值，然后依次更新

        4. 如果原始二维dp是m*n的维度，如果m是100万，但是n是4列，上面的方法建立一个4长度的一维数据循环更新100万次即可
        但是如果m是4行，n是100万列，需要准备100万长度的一维数组，空间很大，此时只需要准备4长度的一维数组，竖着放从左到
        右依次更新

如果求一个位置的值没有枚举行为，记忆化搜索和严格表结构的答案同样的好
如果有枚举行为，列出可能性，根据关系优化枚举行为