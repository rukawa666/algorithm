package com.rukawa.algorithm.leetcode.top100likedquestions;

/**
 * Created with Intellij IDEA
 *
 * @Author：SuperHai
 * @Date：2020-09-19 11:22
 * @Version：1.0
 */
public class Problem_0190_ReverseBits {
    /**
     * 颠倒给定的 32 位无符号整数的二进制位。
     *
     * 示例 1：
     * 输入: 00000010100101000001111010011100
     * 输出: 00111001011110000010100101000000
     * 解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
     *      因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
     *
     * 示例 2：
     * 输入：11111111111111111111111111111101
     * 输出：10111111111111111111111111111111
     * 解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
     *      因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。
     *  
     * 提示：
     * 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，
     * 因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
     * 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 2 中，输入表示有符号整数 -3，
     * 输出表示有符号整数 -1073741825。
     *
     * 进阶:
     * 如果多次调用这个函数，你将如何优化你的算法？
     */


    /**
     * 给个例子，假设n的二进制位为：
     * 1011 0111 0011 1001 0011 1111 0110 1010
     * 解释一下，第一行，是把n左边16位，和n右边的16位交换
     * n = (n >>> 16 | n << 16)
     * 因为n >>> 16就是左边16位被移动到了右侧
     * 同时n << 16就是右边16位被移动到了左侧
     * 又 | 在了一起，所以n变成了
     * 0011 1111 0110 1010 1011 0111 0011 1001
     *
     * 第二行，n = ((n & 0xff00ff00) >>> 8 | (n & 0x00ff00ff) << 8)
     * (n & 0xff00ff00)
     * 这一句的意思是，左侧开始算0~7位，保留；8~15，全变0；16~23，保留；24~31，全变0
     * 0011 1111 0000 0000 1011 0111 0000 0000
     * (n & 0xff00ff00) >>> 8 这句就是上面的值，统一向右移动8位，变成
     * 0000 0000 0011 1111 0000 0000 1011 0111
     *
     * (n & 0x00ff00ff)
     * 这一句的意思是，左侧开始算七位，全变0；8~15，保留；16~23，全变0，,24~31，保留
     * 0000 0000 0110 1010 0000 0000 0011 1001
     * (n & 0x00ff00ff) << 8 这句话就是上面的值，统一向左移动8位，变成
     * 0110 1010 0000 0000 0011 1001 0000 0000
     * 那么((n & 0xff00ff00) >>> 8 | (n & 0x00ff00ff) << 8)
     * 效果就是：n的0~7位和8~15位交换，16~23位和24~31位交换
     * 0110 1010 0011 1111 0011 1001 1011 0111  <- (0011 1111 0110 1010 1011 0111 0011 1001)
     *
     * 也就是说，整个过程是n的左16位和n的右16位交换
     * n的左16位的内部，左8位和右8位交换；n的右16位的内部，左8位和右8位交换
     * 接下来的一行，其实是，从左边开始算，在0~7内部，左4和右4交换；8~15位，左4和右4交换；...
     * 接下来的一行，其实是，从左边开始算，在0~3内部，左2和右2交换；4~7位，左2和右2交换；...
     * 最后的一行，其实是，从左边开始算，0~1内部，左1和右1交换；2~3位，左1和右1交换；...
     */
    public int reverseBits(int n) {
        /**
         * 用数字0～9和a,b,c,d,e,f 其中a～f代表10～15
         * 开头的0令解析器更容易辨认数
         * 第二位的x则代表16进制
         * 0xff00ff00 转化位二进制就是 1111 1111 0000 0000 1111 1111 0000 0000
         *                           f    f    0     0    f    f    0    0
         */

        // n的前16位和后16位整体交换顺序
        n = (n >>> 16) | (n << 16);
        // 每个16位的高8位置和低8位置交换
        n = ((n & 0xff00ff00) >>> 8 | (n & 0x00ff00ff) << 8);
        // 每个8位的高4位置和低4位置交换
        n = ((n & 0xf0f0f0f0) >>> 4 | (n & 0x0f0f0f0f) << 4);
        // 每个4位的高2位和低2位交换
        n = ((n & 0xcccccccc) >>> 2 | (n & 0x33333333) << 2);
        // 每个2位的高1位和低1位交换
        n = ((n & 0xaaaaaaaa) >>> 1 | (n & 0x55555555) << 1);
        return n;
    }
}
