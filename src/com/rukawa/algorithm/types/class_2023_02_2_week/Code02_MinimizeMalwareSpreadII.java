package com.rukawa.algorithm.types.class_2023_02_2_week;

import java.util.Arrays;

// 测试链接 : https://leetcode.cn/problems/minimize-malware-spread-ii/
public class Code02_MinimizeMalwareSpreadII {

	public int minMalwareSpread(int[][] graph, int[] initial) {
		int n = graph.length;
		boolean[] virus = new boolean[n];
		for (int i : initial) {
			virus[i] = true;
		}
		UnionFind uf = new UnionFind(n);
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (graph[i][j] == 1 && !virus[i] && !virus[j]) {
					uf.union(i, j);
				}
			}
		}
		int[] infect = new int[n];
		Arrays.fill(infect, -1);
		for (int v : initial) {
			for (int next = 0; next < n; next++) {
				if (v != next && !virus[next] && graph[v][next] == 1) {
					int f = uf.find(next);
					if (infect[f] == -1) {
						infect[f] = v;
					} else {
						if (infect[f] != -2 && infect[f] != v) {
							infect[f] = -2;
						}
					}
				}
			}
		}
		int[] cnt = new int[n];
		for (int i = 0; i < n; i++) {
			if (infect[i] >= 0) {
				cnt[infect[i]] += uf.size[i];
			}
		}
		Arrays.sort(initial);
		int ans = initial[0];
		int count = cnt[ans];
		for (int i : initial) {
			if (cnt[i] > count) {
				ans = i;
				count = cnt[i];
			}
		}
		return ans;
	}

	public static class UnionFind {
		public int[] father;
		public int[] size;
		public int[] help;

		public UnionFind(int n) {
			father = new int[n];
			size = new int[n];
			help = new int[n];
			for (int i = 0; i < n; i++) {
				father[i] = i;
				size[i] = 1;
			}
		}

		public int find(int i) {
			int hi = 0;
			while (i != father[i]) {
				help[hi++] = i;
				i = father[i];
			}
			while (hi != 0) {
				father[help[--hi]] = i;
			}
			return i;
		}

		public void union(int i, int j) {
			int fi = find(i);
			int fj = find(j);
			if (fi != fj) {
				if (size[fi] >= size[fj]) {
					father[fj] = fi;
					size[fi] += size[fj];
				} else {
					father[fi] = fj;
					size[fj] += size[fi];
				}
			}
		}
	}

}
