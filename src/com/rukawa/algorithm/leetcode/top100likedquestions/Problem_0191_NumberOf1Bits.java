package com.rukawa.algorithm.leetcode.top100likedquestions;

/**
 * Created with Intellij IDEA
 *
 * @Author：SuperHai
 * @Date：2020-09-19 11:22
 * @Version：1.0
 */
public class Problem_0191_NumberOf1Bits {
    /**
     * 位1的个数
     * 编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。
     *
     * 示例 1：
     * 输入：00000000000000000000000000001011
     * 输出：3
     * 解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
     *
     * 示例 2：
     * 输入：00000000000000000000000010000000
     * 输出：1
     * 解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
     *
     * 示例 3：
     * 输入：11111111111111111111111111111101
     * 输出：31
     * 解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
     *
     * 提示：
     * 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，
     * 并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
     * 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。
     *
     * 进阶:
     * 如果多次调用这个函数，你将如何优化你的算法？
     */
    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {
        int bits = 0;
        int rightOne = 0;
        while (n != 0) {
            bits++;
            rightOne = n & (-n);
            n ^= rightOne;
        }
        return bits;
    }

    public int hammingWeight1(int n) {
        /**
         * 用数字0～9和a,b,c,d,e,f 其中a～f代表10～15
         * 开头的0令解析器更容易辨认数
         * 第二位的x则代表16进制
         * 0xff00ff00 转化位二进制就是 1111 1111 0000 0000 1111 1111 0000 0000
         *                           f    f    0     0    f    f    0    0
         */
        // 55555555 0101 0101 0101 0101 0101 0101 0101 0101
        // 之前是单独的1一起算的结果，现在是两位的1一起算的结果
        n = (n & 0x55555555) + ((n >>> 1) & 0x55555555);
        // 33333333 0011 0011 0011 0011 0011 0011 0011 0011
        n = (n & 0x33333333) + ((n >>> 2) & 0x33333333);
        // 0f0f0f0f 0000 1111 0000 1111 0000 1111 0000 1111
        n = (n & 0x0f0f0f0f) + ((n >>> 4) & 0x0f0f0f0f);
        // 00ff00ff 0000 0000 1111 1111 0000 0000 1111 1111
        n = (n & 0x00ff00ff) + ((n >>> 8) & 0x00ff00ff);
        // 0000ffff 0000 0000 0000 0000 1111 1111 1111 1111
        n = (n & 0x0000ffff) + ((n >>> 16) & 0x0000ffff);
        return n;
    }
}
