什么是Morris遍历？
    二叉树的递归遍历，时间复杂度T(N)：O(N), 空间复杂度S(N)：O(height)
    Morris遍历可以优化S(N)为O(1)，时间复杂度不变

原理：利用一棵树上大量空闲指针的方式，达到节省空间的目的，即右孩子节点为null

流程：假设当前来到当前节点cur，开始时cur来到头节点位置
    1. 如果cur没有左孩子，cur向右移动(cur=cur.right)
    2. 如果cur有左孩子，找到左子树上最右的节点mostRight
       a. 如果mostRight的右指针指向空，让其指向cur，然后cur向左移动(cur=cur.left)
       b. 如果mostRight的右指针指向cur，让其指向null，然后cur向右移动(cr=cur.right)
    3. cur为空时遍历停止

实质：利用左树上最右节点的右指针状态，标记是第一次还是第二次

作用：内存吃紧的系统上，越有效

先序：对于能回到两次的节点，第一次到的时候就处理；对于到达一次的节点直接处理
中序：对于能回到两次的节点，第二次到的时候就处理；对于到达一次的节点直接处理
后序：对于能回到两次的节点，在第二次的时候处理，逆序打印左树右边界，morris跑完之后逆序打印整棵树的右边界，打印方式用链表反转

需要左树信息和右树信息做强整合的，只能用二叉树的递归套路，不能使用Morris遍历
如果不需要收集左树和右树的强整合，不依赖全部信息，则用Morris可以改